{"version":3,"sources":["server/firebase.js","components/SideBar/UserInfo/UserInfo.component.jsx","store/actiontypes.js","components/SideBar/Channels/Channels.component.jsx","store/actioncreator.js","components/SideBar/SideBar.component.jsx","components/Messages/MessageHeader/MessageHeader.component.jsx","components/Messages/MessageContent/MessageContent.component.jsx","components/Messages/ImageUpload/ImageUpload.component.jsx","components/Messages/MessageInput/MessageInput.component.jsx","components/Messages/Messages.component.jsx","App.js","serviceWorker.js","components/Auth/Register/Register.component.jsx","components/Auth/Login/Login.component.jsx","store/reducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","connect","state","user","currentUser","props","signOut","auth","then","console","log","Grid","Column","Row","className","Header","inverted","as","Icon","name","Content","Dropdown","trigger","Image","src","photoURL","avatar","displayName","options","key","text","onClick","SET_USER","SET_CHANNEL","SET_FAVOURITECHANNEL","REMOVE_FAVOURITECHANNEL","channel","currentChannel","dispatch","selectChannel","type","payload","setChannel","useState","modalOpenState","setModalOpenState","description","channelAddState","setChannelAddState","isLoadingState","setIsLoadingState","channelsState","setChannelsState","channelsRef","database","ref","useEffect","on","snap","currentState","updatedState","push","val","length","off","closeModal","onSubmit","id","created_by","child","update","catch","err","handleInput","event","target","value","Menu","Item","map","MenuItem","active","displayChannels","Modal","open","onClose","Form","Segment","stacked","Input","onChange","placeholder","Actions","Button","loading","SideBar","vertical","fixed","borderless","size","MessageHeader","clearing","floated","channelName","starChange","starred","color","icon","searchTermChange","TimeAgo","locale","en","timeAgo","MessageContent","Comment","Avatar","message","ownMessage","Author","Metadata","format","timestamp","image","onLoad","imageLoaded","Text","content","ImageUpload","fileState","setFileState","acceptedTypes","file","files","label","includes","mime","lookup","uploadImage","messageRef","storageRef","storage","messageState","setMessageState","fileDialogState","setFileDialog","sendMessage","downloadUrl","set","uid","ServerValue","TIMESTAMP","createMessageInfo","fluid","labelPosition","contentType","filePath","uuidv4","put","data","getDownloadURL","url","favouriteChannels","favouriteChannel","setfavouriteChannel","removefavouriteChannel","usersRef","messagesState","setMessagesState","searchTermState","setSearchTermState","filterMessageBySearchTerm","regex","RegExp","reduce","acc","match","isStarred","Object","keys","favouriteRef","remove","channelId","e","Group","messagesToDisplay","displayMessages","warn","App","columns","Boolean","window","location","hostname","Register","userCollectionRef","username","email","password","confirmpassword","userState","setuserState","errorState","seterrorState","isLoading","setIsLoading","isSuccess","setIsSuccess","currentuser","isFormEmpty","checkPassword","error","concat","updateuserDetails","createdUser","updateProfile","saveUserInDB","serverError","verticalAlign","textAlign","style","maxWidth","createUserWithEmailAndPassword","reload","iconPosition","disabled","Message","index","success","to","Login","signInWithEmailAndPassword","defaultUserState","defaultChannelState","defaultFavouriteChannelState","combinedReducers","combineReducers","action","store","createStore","getState","IndexWithRouter","withRouter","setUser","onAuthStateChanged","history","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88dbe4b3.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport 'firebase/database';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDGMrXZ1ob-bFqTGaQUI0nAlZR2IH7wPBg\",\n  authDomain: \"slack-cloning-react.firebaseapp.com\",\n  projectId: \"slack-cloning-react\",\n  storageBucket: \"slack-cloning-react.appspot.com\",\n  messagingSenderId: \"64237170097\",\n  appId: \"1:64237170097:web:9a487ab56d032bcbd06190\",\n  measurementId: \"G-ZFZVL7W4HG\"\n};\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;\n","import React from 'react';\nimport { Grid, Header, Icon, Image, Dropdown } from 'semantic-ui-react';\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\nimport \"./UserInfo.css\";\n\nconst UserInfo = (props) => {\n    const options = () => {\n        return [{\n            key : 'signout',\n            text : <span onClick = {signOut}>Sign Out</span>\n        }]\n    }\n    const signOut = () => {\n        firebase.auth()\n            .signOut()\n            .then(() => console.log(\"user signed out\"));\n    }\n    if(props.user) {\n    return (<Grid>\n        <Grid.Column>\n            <Grid.Row className = \"userinfo_grid_row\">\n                <Header inverted as = \"h2\">\n                    <Icon name=\"slack\" />\n                    <Header.Content>Slack</Header.Content>\n                </Header>\n                <Header className= \"userinfo_displayname\" inverted as = \"h4\">\n                        <Dropdown\n                        trigger={\n                        <span>\n                            <Image src={props.user.photoURL} avatar></Image>\n                            {props.user.displayName}\n                        </span>  \n                        }\n                        options ={options()}\n                        >\n                        </Dropdown>\n                </Header>\n            </Grid.Row>\n        </Grid.Column>\n    </Grid>)\n    }\n    return null;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser\n    }\n}\n\nexport default connect(mapStateToProps)(UserInfo);","export const SET_USER = 'SET_USER' \nexport const SET_CHANNEL = 'SET_CHANNEL' \nexport const SET_FAVOURITECHANNEL = 'SET_FAVOURITECHANNEL' \nexport const REMOVE_FAVOURITECHANNEL = 'REMOVE_FAVOURITECHANNEL' \n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Menu, Icon, Modal, Form, Segment, Button, MenuItem } from 'semantic-ui-react';\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\";\n\nimport './Channels.css';\nconst Channels = (props) => {\n    const [modalOpenState, setModalOpenState] = useState(false);\n    const [channelAddState, setChannelAddState] = useState({ name: '', description: '' });\n    const [isLoadingState, setIsLoadingState] = useState(false);\n    const [channelsState, setChannelsState] = useState([]);\n    const channelsRef = firebase.database().ref(\"channels\");\n\n    useEffect(() => {\n        channelsRef.on('child_added', (snap) => {\n             setChannelsState((currentState) => {\n                 let updatedState = [...currentState];\n                 updatedState.push(snap.val());// push new channel\n                 if (updatedState.length >= 0) {\n                     props.selectChannel(updatedState[0])\n                 }// khi mà component bị render thì ta sẽ chọn channel đầu tiên\n                 return updatedState;\n             })\n\n         })\n        return () => channelsRef.off();\n    }, [])\n\n    const openModal = () => {\n        setModalOpenState(true)\n    }\n    const closeModal = () => {\n        setModalOpenState(false)\n    }\n    const displayChannels = () => {\n        if (channelsState.length > 0) {\n            return channelsState.map((channel) => {\n                return <MenuItem\n                    key={channel.id}\n                    name={channel.name}\n                    onClick={() => props.selectChannel(channel)}\n                    active={channel.id === props.channel.id}\n                >\n                </MenuItem>\n            }\n            )\n        }\n    }\n\n\n    const onSubmit = () => {\n        const key = channelsRef.push().key;\n        const channel = {\n            id: key,\n            name: channelAddState.name,\n            description: channelAddState.description,\n            created_by: {\n                name: props.user.displayName,\n                avatar: props.user.photoURL\n            }\n        }\n        setIsLoadingState(true);\n        channelsRef.child(key)\n            .update(channel)\n            .then(() => {\n                setChannelAddState({ name: '', description: '' });\n                setIsLoadingState(false);\n                closeModal();\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    const handleInput = (event) => {\n        let target = event.target;\n        setChannelAddState((currentState) => {\n            let updatedState = { ...currentState };\n            updatedState[target.name] = target.value;\n            return updatedState;\n        })\n    }\n    return <> <Menu.Menu>\n        <Menu.Item>\n            <span>\n                <Icon name=\"exchange\" /> Channels\n            </span>\n            ({channelsState.length})\n        </Menu.Item>\n        {displayChannels()}\n        <Menu.Item>\n            <span className=\"clickable\" onClick={openModal}>\n                <Icon name=\"add\" />ADD\n            </span>\n        </Menu.Item>\n    </Menu.Menu>\n        <Modal open={modalOpenState} onClose={closeModal}>\n            <Modal.Header>\n                Create Channel\n        </Modal.Header>\n            <Modal.Content>\n                <Form onSubmit={onSubmit}>\n                    <Segment stacked>\n                        <Form.Input\n                            name=\"name\"\n                            value={channelAddState.name}\n                            onChange={handleInput}\n                            type=\"text\"\n                            placeholder=\"Enter Channel Name\"\n                        />\n                        <Form.Input\n                            name=\"description\"\n                            value={channelAddState.description}\n                            onChange={handleInput}\n                            type=\"text\"\n                            placeholder=\"Enter Channel Description\"\n                        />\n                    </Segment>\n                </Form>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button loading={isLoadingState} onClick={onSubmit}>\n                    <Icon name=\"checkmark\" />Save\n            </Button>\n                <Button onClick={closeModal}>\n                    <Icon name=\"remove\" />Cancel\n            </Button>\n            </Modal.Actions>\n        </Modal>\n    </>\n}\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser,\n        channel: state.channel.currentChannel\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectChannel: (channel) => dispatch(setChannel(channel))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Channels);","import { SET_USER, SET_CHANNEL ,SET_FAVOURITECHANNEL,REMOVE_FAVOURITECHANNEL} from './actiontypes';\n\nexport const setUser = (user) => {\n    return {\n        type: SET_USER,\n        payload: {\n            currentUser: user\n        }\n    }\n}\n\nexport const setChannel = (channel) => {\n    return {\n        type: SET_CHANNEL,\n        payload: {\n            currentChannel: channel\n        }\n    }\n}\n\nexport const setfavouriteChannel = (channel) => {\n    return {\n        type: SET_FAVOURITECHANNEL,\n        payload: {\n            favouriteChannel: channel\n        }\n    }\n}\n\nexport const removefavouriteChannel = (channel) => {\n    return {\n        type: REMOVE_FAVOURITECHANNEL,\n        payload: {\n            favouriteChannel: channel\n        }\n    }\n}","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport UserInfo from \"./UserInfo/UserInfo.component\";\nimport Channels  from \"./Channels/Channels.component\";\nimport \"./SideBar.css\";\n\nexport const SideBar = () => {\n    return (<Menu vertical fixed=\"left\" borderless size=\"large\" className=\"side_bar\">\n        <UserInfo />\n        <Channels/>\n    </Menu>\n    )\n}","import React from 'react';\nimport {Segment, Header, Input, Icon} from 'semantic-ui-react';\n\nconst MessageHeader = (props) => {\n    return <Segment clearing>\n        <Header floated = \"left\" as = \"h2\">\n            <span>\n                {props.channelName} \n                <Icon\n                    onClick={props.starChange}\n                    name={props.starred ? \"star\" : \"star outline\"}\n                    color={props.starred ? \"yellow\" : \"black\"} />\n            </span>\n        </Header>\n        <Header floated = \"right\">\n            <Input\n            name = \"search\"\n            icon = \"search\"\n            placeholder = \"Search Messages\"\n            size = \"mini\"\n            onChange = {props.searchTermChange} \n            />\n        </Header>\n    </Segment>\n}\n\nexport default MessageHeader;","import React from 'react';\nimport { Comment,Image } from \"semantic-ui-react\";\nimport TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\n\nimport \"./MessageContent.css\";\n\nTimeAgo.locale(en);\n\nconst timeAgo = new TimeAgo();\n\nconst MessageContent = (props) => {\n    return <Comment>\n    <Comment.Avatar src={props.message.user.avatar} />\n    <Comment.Content className={props.ownMessage ? \"ownMessage\" : null}>\n        <Comment.Author as=\"a\">{props.message.user.name}</Comment.Author>\n        <Comment.Metadata>{timeAgo.format(props.message.timestamp)}</Comment.Metadata>\n        {props.message.image ? <Image onLoad={props.imageLoaded} src={props.message.image} /> :\n            <Comment.Text>{props.message.content}</Comment.Text>\n        }\n    </Comment.Content>\n</Comment>\n}\n\nexport default MessageContent;","import React, { useState } from 'react';\nimport { Input, Modal, Button, Icon } from 'semantic-ui-react';\nimport mime from \"mime-types\";\n\n\nexport const ImageUpload = (props) => {\n\n    const [fileState, setFileState] = useState(null);\n\n    const acceptedTypes = [\"image/png\", \"image/jpeg\"]\n\n    const onFileAdded = (event) => {\n        const file = event.target.files[0];\n        if(file) {\n            setFileState(file);\n        }\n    }\n    const submit = () => {\n        if(fileState && acceptedTypes.includes(mime.lookup(fileState.name))){\n            props.uploadImage(fileState,mime.lookup(fileState.name))\n            props.onClose();\n            setFileState(null);\n        }\n    }\n    return (<Modal open = {props.open} onClose = {props.onClose}>\n        <Modal.Header>Select a image</Modal.Header>\n        <Modal.Content>\n            <Input\n            type = \"file\"\n            name = \"file\"\n            onChange = {onFileAdded}\n            label = \"File Type (png,jpeg)\"\n            />\n        </Modal.Content>\n        <Modal.Actions>\n            <Button onClick = {submit}>\n                <Icon name = \"checkmark\" />Add\n            </Button>\n            <Button onClick = {props.onClose}>\n                <Icon name = \"remove\" />Cancel\n            </Button>\n        </Modal.Actions>\n    </Modal>)\n}","import React, { useState } from 'react';\nimport { Segment, Input, Button } from \"semantic-ui-react\";\nimport firebase from \"../../../server/firebase\";\nimport { connect } from \"react-redux\";\nimport { ImageUpload } from \"../ImageUpload/ImageUpload.component\"\nimport uuidv4 from \"uuid/v4\";\n\nconst MessageInput = (props) => {\n    const messageRef = firebase.database().ref('messages');\n    const storageRef = firebase.storage().ref();\n    const [messageState, setMessageState] = useState(\"\");\n\n    const [fileDialogState, setFileDialog] = useState(false);\n\n    const createMessageInfo = (downloadUrl) => {\n        return {\n            user: {\n                avatar: props.user.photoURL,\n                name: props.user.displayName,\n                id: props.user.uid\n            },\n            content: messageState,\n            image : downloadUrl || \"\",\n            timestamp: firebase.database.ServerValue.TIMESTAMP\n        }\n    }\n\n    const sendMessage = (downloadUrl) => {\n        if (messageState || downloadUrl) {\n            messageRef.child(props.channel.id)\n                .push()\n                .set(createMessageInfo(downloadUrl))\n                .then(() => setMessageState(\"\"))\n                .catch((err) => console.log(err))\n        }\n    }\n\n    const onMessageChange = (event) => {\n        const target = event.target;\n        setMessageState(target.value);\n    }\n\n    const createActionButtons = () => {\n        return <>\n            <Button icon=\"send\" onClick={() => {sendMessage() }} />\n            <Button icon=\"upload\" onClick={() => setFileDialog(true)} />\n        </>\n    }\n\n    const uploadImage = (file, contentType) => {\n        const filePath = `chat/images/${uuidv4()}.jpg`;\n        storageRef.child(filePath).put(file, { contentType: contentType })\n        .then((data) => {\n            data.ref.getDownloadURL()\n            .then((url) => {\n                sendMessage(url);\n            })\n            .catch((err) => console.log(err));\n        })\n        .catch((err) => console.log(err));\n    }\n    return <Segment>\n        <Input \n           onChange={onMessageChange}\n           fluid={true}\n           name=\"message\"\n           value={messageState}\n           label={createActionButtons()}\n           labelPosition=\"right\"\n        />\n        <ImageUpload uploadImage={uploadImage} open={fileDialogState} onClose={() => setFileDialog(false)} />\n    </Segment>\n}\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser,\n        channel: state.channel.currentChannel\n    }\n}\n\nexport default connect(mapStateToProps)(MessageInput);","import React, { useEffect, useState } from 'react';\n\nimport MessageHeader from './MessageHeader/MessageHeader.component';\nimport MessageContent from \"./MessageContent/MessageContent.component\";\nimport MessageInput from \"./MessageInput/MessageInput.component\";\nimport { connect } from \"react-redux\";\nimport {setfavouriteChannel, removefavouriteChannel} from \"../../store/actioncreator\"\nimport firebase from \"../../server/firebase\";\nimport { Segment, Comment } from 'semantic-ui-react';\nimport \"./Messages.css\";\n\nconst Messages = (props) => {\n\n    const messageRef = firebase.database().ref('messages');\n    const usersRef = firebase.database().ref('users');\n    const [messagesState, setMessagesState] = useState([]);\n    const [searchTermState, setSearchTermState] = useState(\"\");\n\n    useEffect(() => {\n        if (props.channel) {\n            setMessagesState([]);\n            messageRef.child(props.channel.id).on('child_added', (snap) => {\n                setMessagesState((currentState) => {\n                    let updatedState = [...currentState];\n                    updatedState.push(snap.val());\n                    return updatedState;\n                    \n                })\n            })\n\n            return () => messageRef.child(props.channel.id).off();\n        }\n    }, [props.channel])\n\n    useEffect(() => {\n\n        if (props.user) {\n            usersRef.child(props.user.uid).child(\"favourite\")\n                .on('child_added', (snap) => {\n                    props.setfavouriteChannel(snap.val());\n                })\n\n            usersRef.child(props.user.uid).child(\"favourite\")\n                .on('child_removed', (snap) => {\n                    props.removefavouriteChannel(snap.val());\n                })\n\n            return () => usersRef.child(props.user.uid).child(\"favourite\").off();\n        }\n    }, [props.user])\n    \n    const displayMessages = () => {\n        let messagesToDisplay = searchTermState ? filterMessageBySearchTerm() : messagesState;\n        if (messagesToDisplay.length > 0) {\n            return messagesToDisplay.map((message) => {\n                return <MessageContent ownMessage={message.user.id === props.user?.uid} key={message.timestamp} message={message} />\n            })\n        }\n    }\n    const searchTermChange = (e) => {\n        const target = e.target;\n        setSearchTermState(target.value);\n    } \n     const filterMessageBySearchTerm = () => {\n        const regex = new RegExp(searchTermState, \"gi\");\n        const messages = messagesState.reduce((acc, message) => {\n            if (message.content.match(regex) || message.user.name.match(regex)) {\n                acc.push(message);\n            }\n            return acc;\n        }, []);\n\n        return messages;\n    } \n    const starChange = () => {\n        let favouriteRef = usersRef.child(props.user.uid).child(\"favourite\").child(props.channel.id);\n        if (isStarred()) {\n            favouriteRef.remove();\n        } else {\n            favouriteRef.set({ channelId: props.channel.id, channelName: props.channel.name })\n        }\n    }\n\n    const isStarred = () => {\n        return Object.keys(props.favouriteChannels).includes(props.channel?.id);\n    }\n    return <div className = \"messages\"><MessageHeader starChange = {starChange} starred = {isStarred()} searchTermChange={searchTermChange} channelName={props.channel?.name}/> \n        <Segment className = \"messagecontent\">\n            <Comment.Group>\n            {displayMessages()}\n            </Comment.Group>\n        </Segment>\n        <MessageInput /></div>\n}\nconst mapStateToProps = (state) => {\n    return {\n        channel: state.channel.currentChannel,\n        user: state.user.currentUser,\n        favouriteChannels: state.favouriteChannel.favouriteChannel\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setfavouriteChannel: (channel) => dispatch(setfavouriteChannel(channel)),\n        removefavouriteChannel: (channel) => dispatch(removefavouriteChannel(channel)),\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Messages);","import React from 'react';\nimport { SideBar } from \"./components/SideBar/SideBar.component\";\nimport Messages from \"./components/Messages/Messages.component\"\nimport './App.css';\nimport { Grid } from 'semantic-ui-react';\nconsole.warn = () => {};\nfunction App() {\n  return (\n    <Grid columns=\"equal\">\n      <SideBar />\n      <Grid.Column className=\"messagepanel\">\n        <Messages />\n      </Grid.Column>\n    </Grid>\n\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React, { useState } from 'react';\nimport { Grid, Form, Segment, Header, Icon, Button, Message} from 'semantic-ui-react';\nimport firebase from '../../../server/firebase';\nimport './Register.css';\nimport { Link } from 'react-router-dom';\n\nconst Register = () => {\n\n    let user = {\n        username: '',\n        email: '',\n        password: '',\n        confirmpassword: ''\n    }\n\n    let errors = [];\n    let userCollectionRef = firebase.database().ref('users');\n    \n    const [userState, setuserState] = useState(user);\n    const [errorState, seterrorState] = useState(errors);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSuccess, setIsSuccess] = useState(false);\n    \n    const handleInput = (event) => {\n        let target = event.target;\n        setuserState((currentState) => {\n            let currentuser = { ...currentState }; \n            currentuser[target.name] = target.value;//usename= giá trị input nhập vào\n            return currentuser;\n        })\n    }\n    const checkForm = () => {\n        if (isFormEmpty()) {\n            seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\n            return false;\n        }\n        if (!checkPassword()) {\n            return false;\n        }\n        return true;\n    }\n\n    const isFormEmpty = () => {\n        return !userState.username.length ||\n            !userState.password.length ||\n            !userState.confirmpassword.length ||\n            !userState.email.length;\n    }\n\n    const checkPassword = () => {\n        if (userState.password.length < 8) {\n            seterrorState((error) => error.concat({ message: \"Password length should be greater than 8\" }));\n            return false;\n        }\n        else if (userState.password !== userState.confirmpassword) {\n            seterrorState((error) => error.concat({ message: \"Password and Confirm Password does not match\" }));\n            return false;\n        }\n        return true;\n    }\n\n    const onSubmit = (event) => {\n        seterrorState(() => []); // xóa các lỗi hiện có trước\n        setIsSuccess(false);\n        if (checkForm()) {\n            setIsLoading(true);\n            firebase.auth().createUserWithEmailAndPassword(userState.email, userState.password) // create email va password trong authentication firebase\n                .then((createdUser) => {\n                    setIsLoading(false);\n                    updateuserDetails(createdUser);\n                    console.log('fiwefiwef');\n                    window.location.reload();\n                \n                })\n                .catch((serverError) => {\n                    setIsLoading(false);\n                    seterrorState((error) => error.concat(serverError));\n                })\n        }\n    }\n    const updateuserDetails = (createdUser) => {\n        if (createdUser) {\n            setIsLoading(true);\n            createdUser.user\n                .updateProfile({\n                    displayName: userState.username,\n                    photoURL: `http://gravatar.com/avatar`\n                })\n                .then(() => {\n                    setIsLoading(false);\n                    saveUserInDB(createdUser)\n                })\n                .catch((serverError) => {\n                    setIsLoading(false);\n                    seterrorState((error) => error.concat(serverError));\n                })\n        }\n    }\n    \n    const saveUserInDB = (createdUser) => {\n        setIsLoading(true);\n        userCollectionRef.child(createdUser.user.uid).set({\n            displayName: createdUser.user.displayName,\n            photoURL: createdUser.user.photoURL\n        })\n            .then(() => {\n                setIsLoading(false);\n                setIsSuccess(true);\n            })\n            .catch(serverError => {\n                setIsLoading(false);\n                seterrorState((error) => error.concat(serverError));\n            })\n    }\n    \n    const formaterrors = () => {\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\n    }\n\n    return (\n        <Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\" >\n        <Grid.Column style={{ maxWidth: '500px' }}>\n            <Header icon as=\"h2\">\n                <Icon name=\"slack\" />\n                Register\n            </Header>\n            <Form onSubmit={onSubmit}>\n                <Segment stacked>\n                    <Form.Input\n                        name=\"username\"\n                        value={userState.username}\n                        icon=\"user\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"text\"\n                        placeholder=\"User Name\"\n                    />\n                    <Form.Input\n                        name=\"email\"\n                        value={userState.email}\n                        icon=\"mail\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"email\"\n                        placeholder=\"User Email\"\n                    />\n                    <Form.Input\n                        name=\"password\"\n                        value={userState.password}\n                        icon=\"lock\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"password\"\n                        placeholder=\"User Password\"\n                    />\n                    <Form.Input\n                        name=\"confirmpassword\"\n                        value={userState.confirmpassword}\n                        icon=\"lock\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"password\"\n                        placeholder=\"Confirm Password\"\n                    />\n                </Segment>\n                <Button disabled={isLoading} loading={isLoading}>Submit</Button>\n            </Form>\n            {errorState.length > 0 && <Message error>\n                <h3>Errors</h3>\n                {formaterrors()}\n            </Message>\n            }\n            {isSuccess && <Message success>\n                <h3>Successfully Registered</h3>\n            </Message>\n            }\n            <Message>\n                Already an User? <Link to=\"/login\" >Login </Link>\n            </Message>\n        </Grid.Column>\n    </Grid>)\n}\nexport default Register;","import React, { useState } from 'react';\nimport { Grid, Form, Segment, Header, Icon, Button, Message } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nimport firebase from '../../../server/firebase';\n\nimport \"../Auth.css\"\n\nconst Login = () => {\n\n    let user = {\n        email: '',\n        password: ''\n    }\n\n    let errors = [];\n\n    const [userState, setuserState] = useState(user);\n    const [isLoading, setIsLoading] = useState(false);\n    const [errorState, seterrorState] = useState(errors);\n\n    const handleInput = (event) => {\n        let target = event.target;\n        setuserState((currentState) => {\n            let currentuser = { ...currentState };\n            currentuser[target.name] = target.value;\n            return currentuser;\n        })\n    }\n\n    const checkForm = () => {\n        if (isFormEmpty()) {\n            seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\n            return false;\n        }\n        return true;\n    }\n\n    const isFormEmpty = () => {\n        return !userState.password.length ||\n            !userState.email.length;\n    }\n\n    const formaterrors = () => {\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\n    }\n\n    const onSubmit = (event) => {\n        seterrorState(() => []);\n        if (checkForm()) {\n            setIsLoading(true);\n            firebase.auth()\n                .signInWithEmailAndPassword(userState.email, userState.password)\n                .then(user => {\n                    setIsLoading(false);\n                    console.log(user);\n                })\n                .catch(serverError => {\n                    setIsLoading(false);\n                    seterrorState((error) => error.concat(serverError));\n                })\n\n        }\n    }\n\n    return <Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\" >\n        <Grid.Column style={{ maxWidth: '500px' }}>\n            <Header icon as=\"h2\">\n                <Icon name=\"slack\" />\n            Login\n        </Header>\n            <Form onSubmit={onSubmit}>\n                <Segment stacked>\n                    <Form.Input\n                        name=\"email\"\n                        value={userState.email}\n                        icon=\"mail\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"email\"\n                        placeholder=\"User Email\"\n                    />\n                    <Form.Input\n                        name=\"password\"\n                        value={userState.password}\n                        icon=\"lock\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"password\"\n                        placeholder=\"User Password\"\n                    />\n                </Segment>\n                <Button disabled={isLoading} loading={isLoading}>Login</Button>\n            </Form>\n            {errorState.length > 0 && <Message error>\n                <h3>Errors</h3>\n                {formaterrors()}\n            </Message>\n            }\n            <Message>\n                Not an User? <Link to=\"/register\" >Register </Link>\n            </Message>\n        </Grid.Column>\n    </Grid>\n}\n\nexport default Login;","import { SET_USER, SET_CHANNEL, SET_FAVOURITECHANNEL, REMOVE_FAVOURITECHANNEL } from './actiontypes';\nimport { combineReducers } from \"redux\";\n\nlet defaultUserState = {\n    currentUser : null\n}\nconst userReducer = (state = defaultUserState, action) => {\n    if (action.type === SET_USER) {\n        let payload = action.payload;\n        state = { ...payload };\n        return state;\n    }\n    return state;\n}\nlet defaultChannelState = {\n    currentChannel : null\n}\nconst channelReducer = (state = defaultChannelState, action) => {\n    if (action.type === SET_CHANNEL) {\n        let payload = action.payload;\n        state = { ...payload };\n        return state;\n    }\n    return state;\n}\n\nlet defaultFavouriteChannelState = {\n    favouriteChannel : {}\n}\n\n\nconst favouriteChannelReducer = (state = defaultFavouriteChannelState, action) => {\n    if (action.type === SET_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel; \n        let updatedState = { ...state.favouriteChannel };\n        updatedState[payload.channelId] = payload.channelName;\n        return { favouriteChannel: updatedState };\n    } else if (action.type === REMOVE_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel;\n        let updatedState = { ...state.favouriteChannel };\n        delete updatedState[payload.channelId];\n        return { favouriteChannel: updatedState };\n    }\n    return state;\n}\n\nexport const combinedReducers = combineReducers({ user: userReducer, channel: channelReducer ,favouriteChannel : favouriteChannelReducer  })","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Switch, Route, withRouter } from \"react-router-dom\";\nimport { Provider, connect } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport Register from \"./components/Auth/Register/Register.component\";\nimport Login from \"./components/Auth/Login/Login.component\";\nimport firebase from \"./server/firebase\";\nimport { combinedReducers } from \"./store/reducer\";\nimport { setUser } from \"./store/actioncreator\";\n\nimport \"semantic-ui-css/semantic.min.css\"\n\nconst store = createStore(combinedReducers)\n\nconst Index = (props) => {\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      console.log(user);\n      if (user) {\n        props.setUser(user);\n        props.history.push(\"/\");\n      } else {\n        props.setUser(null);\n        props.history.push(\"/login\");\n      }\n    })\n  }, []);\n\n  return (<>\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/\" component={App} />\n    </Switch></>)\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.user.currentUser,\n    \n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser: (user) => { dispatch(setUser(user)) }\n  }\n}\nconsole.log(store.getState());\n\nconst IndexWithRouter = withRouter(connect(mapStateToProps, mapDispatchToProps)(Index));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <IndexWithRouter />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}