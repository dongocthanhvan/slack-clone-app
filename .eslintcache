[{"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\index.js":"1","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\App.js":"2","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Auth\\Register\\Register.component.jsx":"3","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Auth\\Login\\Login.component.jsx":"4","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\server\\firebase.js":"5","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\store\\actioncreator.js":"6","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\store\\reducer.js":"7","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\store\\actiontypes.js":"8","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\serviceWorker.js":"9","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\SideBar\\SideBar.component.jsx":"10","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\SideBar\\UserInfo\\UserInfo.component.jsx":"11","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\SideBar\\Channels\\Channels.component.jsx":"12","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\MessageInput\\MessageInput.component.jsx":"13","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\MessageHeader\\MessageHeader.component.jsx":"14","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\Messages.component.jsx":"15","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\MessageContent\\MessageContent.component.jsx":"16","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\ImageUpload\\ImageUpload.component.jsx":"17"},{"size":1958,"mtime":1614587465913,"results":"18","hashOfConfig":"19"},{"size":444,"mtime":1614222866731,"results":"20","hashOfConfig":"19"},{"size":6622,"mtime":1614253786743,"results":"21","hashOfConfig":"19"},{"size":3399,"mtime":1611564032961,"results":"22","hashOfConfig":"19"},{"size":546,"mtime":1613906603078,"results":"23","hashOfConfig":"19"},{"size":786,"mtime":1614161310230,"results":"24","hashOfConfig":"19"},{"size":1598,"mtime":1614241344958,"results":"25","hashOfConfig":"19"},{"size":208,"mtime":1614157360929,"results":"26","hashOfConfig":"19"},{"size":5481,"mtime":1611819447152,"results":"27","hashOfConfig":"19"},{"size":392,"mtime":1612244103560,"results":"28","hashOfConfig":"19"},{"size":1606,"mtime":1613668485855,"results":"29","hashOfConfig":"19"},{"size":5035,"mtime":1614245813143,"results":"30","hashOfConfig":"19"},{"size":2676,"mtime":1614245847270,"results":"31","hashOfConfig":"19"},{"size":832,"mtime":1614161385128,"results":"32","hashOfConfig":"19"},{"size":4170,"mtime":1614585248086,"results":"33","hashOfConfig":"19"},{"size":863,"mtime":1614061177186,"results":"34","hashOfConfig":"19"},{"size":1353,"mtime":1614228993883,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"11ibr93",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"57"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\index.js",["77"],"import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Switch, Route, withRouter } from \"react-router-dom\";\nimport { Provider, connect } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport Register from \"./components/Auth/Register/Register.component\";\nimport Login from \"./components/Auth/Login/Login.component\";\nimport firebase from \"./server/firebase\";\nimport { combinedReducers } from \"./store/reducer\";\nimport { setUser } from \"./store/actioncreator\";\n\nimport \"semantic-ui-css/semantic.min.css\"\n\nconst store = createStore(combinedReducers)\n\nconst Index = (props) => {\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      console.log(user);\n      if (user) {\n        props.setUser(user);\n        props.history.push(\"/\");\n      } else {\n        props.setUser(null);\n        props.history.push(\"/login\");\n      }\n    })\n  }, []);\n\n  return (<>\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/\" component={App} />\n    </Switch></>)\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.user.currentUser,\n    \n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser: (user) => { dispatch(setUser(user)) }\n  }\n}\nconsole.log(store.getState());\n\nconst IndexWithRouter = withRouter(connect(mapStateToProps, mapDispatchToProps)(Index));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <IndexWithRouter />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\App.js",[],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Auth\\Register\\Register.component.jsx",[],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Auth\\Login\\Login.component.jsx",[],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\server\\firebase.js",[],["78","79"],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\store\\actioncreator.js",[],["80","81"],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\store\\reducer.js",[],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\store\\actiontypes.js",[],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\serviceWorker.js",[],["82","83"],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\SideBar\\SideBar.component.jsx",[],["84","85"],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\SideBar\\UserInfo\\UserInfo.component.jsx",[],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\SideBar\\Channels\\Channels.component.jsx",["86"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Menu, Icon, Modal, Form, Segment, Button, MenuItem } from 'semantic-ui-react';\r\nimport firebase from \"../../../server/firebase\";\r\nimport { setChannel } from \"../../../store/actioncreator\";\r\n\r\nimport './Channels.css';\r\nconst Channels = (props) => {\r\n    const [modalOpenState, setModalOpenState] = useState(false);\r\n    const [channelAddState, setChannelAddState] = useState({ name: '', description: '' });\r\n    const [isLoadingState, setIsLoadingState] = useState(false);\r\n    const [channelsState, setChannelsState] = useState([]);\r\n    const channelsRef = firebase.database().ref(\"channels\");\r\n\r\n    useEffect(() => {\r\n        channelsRef.on('child_added', (snap) => {\r\n             setChannelsState((currentState) => {\r\n                 let updatedState = [...currentState];\r\n                 updatedState.push(snap.val());// push new channel\r\n                 if (updatedState.length >= 0) {\r\n                     props.selectChannel(updatedState[0])\r\n                 }// khi mà component bị render thì ta sẽ chọn channel đầu tiên\r\n                 return updatedState;\r\n             })\r\n\r\n         })\r\n        return () => channelsRef.off();\r\n    }, [])\r\n\r\n    const openModal = () => {\r\n        setModalOpenState(true)\r\n    }\r\n    const closeModal = () => {\r\n        setModalOpenState(false)\r\n    }\r\n    const displayChannels = () => {\r\n        if (channelsState.length > 0) {\r\n            return channelsState.map((channel) => {\r\n                return <MenuItem\r\n                    key={channel.id}\r\n                    name={channel.name}\r\n                    onClick={() => props.selectChannel(channel)}\r\n                    active={channel.id === props.channel.id}\r\n                >\r\n                </MenuItem>\r\n            }\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    const onSubmit = () => {\r\n        const key = channelsRef.push().key;\r\n        const channel = {\r\n            id: key,\r\n            name: channelAddState.name,\r\n            description: channelAddState.description,\r\n            created_by: {\r\n                name: props.user.displayName,\r\n                avatar: props.user.photoURL\r\n            }\r\n        }\r\n        setIsLoadingState(true);\r\n        channelsRef.child(key)\r\n            .update(channel)\r\n            .then(() => {\r\n                setChannelAddState({ name: '', description: '' });\r\n                setIsLoadingState(false);\r\n                closeModal();\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    const handleInput = (event) => {\r\n        let target = event.target;\r\n        setChannelAddState((currentState) => {\r\n            let updatedState = { ...currentState };\r\n            updatedState[target.name] = target.value;\r\n            return updatedState;\r\n        })\r\n    }\r\n    return <> <Menu.Menu>\r\n        <Menu.Item>\r\n            <span>\r\n                <Icon name=\"exchange\" /> Channels\r\n            </span>\r\n            ({channelsState.length})\r\n        </Menu.Item>\r\n        {displayChannels()}\r\n        <Menu.Item>\r\n            <span className=\"clickable\" onClick={openModal}>\r\n                <Icon name=\"add\" />ADD\r\n            </span>\r\n        </Menu.Item>\r\n    </Menu.Menu>\r\n        <Modal open={modalOpenState} onClose={closeModal}>\r\n            <Modal.Header>\r\n                Create Channel\r\n        </Modal.Header>\r\n            <Modal.Content>\r\n                <Form onSubmit={onSubmit}>\r\n                    <Segment stacked>\r\n                        <Form.Input\r\n                            name=\"name\"\r\n                            value={channelAddState.name}\r\n                            onChange={handleInput}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Channel Name\"\r\n                        />\r\n                        <Form.Input\r\n                            name=\"description\"\r\n                            value={channelAddState.description}\r\n                            onChange={handleInput}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter Channel Description\"\r\n                        />\r\n                    </Segment>\r\n                </Form>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button loading={isLoadingState} onClick={onSubmit}>\r\n                    <Icon name=\"checkmark\" />Save\r\n            </Button>\r\n                <Button onClick={closeModal}>\r\n                    <Icon name=\"remove\" />Cancel\r\n            </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    </>\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user.currentUser,\r\n        channel: state.channel.currentChannel\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectChannel: (channel) => dispatch(setChannel(channel))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Channels);","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\MessageInput\\MessageInput.component.jsx",[],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\MessageHeader\\MessageHeader.component.jsx",[],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\Messages.component.jsx",["87","88"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport MessageHeader from './MessageHeader/MessageHeader.component';\r\nimport MessageContent from \"./MessageContent/MessageContent.component\";\r\nimport MessageInput from \"./MessageInput/MessageInput.component\";\r\nimport { connect } from \"react-redux\";\r\nimport {setfavouriteChannel, removefavouriteChannel} from \"../../store/actioncreator\"\r\nimport firebase from \"../../server/firebase\";\r\nimport { Segment, Comment } from 'semantic-ui-react';\r\nimport \"./Messages.css\";\r\n\r\nconst Messages = (props) => {\r\n\r\n    const messageRef = firebase.database().ref('messages');\r\n    const usersRef = firebase.database().ref('users');\r\n    const [messagesState, setMessagesState] = useState([]);\r\n    const [searchTermState, setSearchTermState] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (props.channel) {\r\n            setMessagesState([]);\r\n            messageRef.child(props.channel.id).on('child_added', (snap) => {\r\n                setMessagesState((currentState) => {\r\n                    let updatedState = [...currentState];\r\n                    updatedState.push(snap.val());\r\n                    return updatedState;\r\n                    \r\n                })\r\n            })\r\n\r\n            return () => messageRef.child(props.channel.id).off();\r\n        }\r\n    }, [props.channel])\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.user) {\r\n            usersRef.child(props.user.uid).child(\"favourite\")\r\n                .on('child_added', (snap) => {\r\n                    props.setfavouriteChannel(snap.val());\r\n                })\r\n\r\n            usersRef.child(props.user.uid).child(\"favourite\")\r\n                .on('child_removed', (snap) => {\r\n                    props.removefavouriteChannel(snap.val());\r\n                })\r\n\r\n            return () => usersRef.child(props.user.uid).child(\"favourite\").off();\r\n        }\r\n    }, [props.user])\r\n    \r\n    const displayMessages = () => {\r\n        let messagesToDisplay = searchTermState ? filterMessageBySearchTerm() : messagesState;\r\n        if (messagesToDisplay.length > 0) {\r\n            return messagesToDisplay.map((message) => {\r\n                return <MessageContent ownMessage={message.user.id === props.user?.uid} key={message.timestamp} message={message} />\r\n            })\r\n        }\r\n    }\r\n    const searchTermChange = (e) => {\r\n        const target = e.target;\r\n        setSearchTermState(target.value);\r\n    } \r\n     const filterMessageBySearchTerm = () => {\r\n        const regex = new RegExp(searchTermState, \"gi\");\r\n        const messages = messagesState.reduce((acc, message) => {\r\n            if (message.content.match(regex) || message.user.name.match(regex)) {\r\n                acc.push(message);\r\n            }\r\n            return acc;\r\n        }, []);\r\n\r\n        return messages;\r\n    } \r\n    const starChange = () => {\r\n        let favouriteRef = usersRef.child(props.user.uid).child(\"favourite\").child(props.channel.id);\r\n        if (isStarred()) {\r\n            favouriteRef.remove();\r\n        } else {\r\n            favouriteRef.set({ channelId: props.channel.id, channelName: props.channel.name })\r\n        }\r\n    }\r\n\r\n    const isStarred = () => {\r\n        return Object.keys(props.favouriteChannels).includes(props.channel?.id);\r\n    }\r\n    return <div className = \"messages\"><MessageHeader starChange = {starChange} starred = {isStarred()} searchTermChange={searchTermChange} channelName={props.channel?.name}/> \r\n        <Segment className = \"messagecontent\">\r\n            <Comment.Group>\r\n            {displayMessages()}\r\n            </Comment.Group>\r\n        </Segment>\r\n        <MessageInput /></div>\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        channel: state.channel.currentChannel,\r\n        user: state.user.currentUser,\r\n        favouriteChannels: state.favouriteChannel.favouriteChannel\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setfavouriteChannel: (channel) => dispatch(setfavouriteChannel(channel)),\r\n        removefavouriteChannel: (channel) => dispatch(removefavouriteChannel(channel)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Messages);","D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\MessageContent\\MessageContent.component.jsx",[],"D:\\Documents\\Code\\Web\\ReactJS\\slack-clone-app\\src\\components\\Messages\\ImageUpload\\ImageUpload.component.jsx",[],{"ruleId":"89","severity":1,"message":"90","line":31,"column":6,"nodeType":"91","endLine":31,"endColumn":8,"suggestions":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"93","replacedBy":"97"},{"ruleId":"95","replacedBy":"98"},{"ruleId":"93","replacedBy":"99"},{"ruleId":"95","replacedBy":"100"},{"ruleId":"93","replacedBy":"101"},{"ruleId":"95","replacedBy":"102"},{"ruleId":"89","severity":1,"message":"103","line":28,"column":8,"nodeType":"91","endLine":28,"endColumn":10,"suggestions":"104"},{"ruleId":"89","severity":1,"message":"105","line":33,"column":8,"nodeType":"91","endLine":33,"endColumn":23,"suggestions":"106"},{"ruleId":"89","severity":1,"message":"107","line":50,"column":8,"nodeType":"91","endLine":50,"endColumn":20,"suggestions":"108"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["109"],"no-native-reassign",["110"],"no-negated-in-lhs",["111"],["110"],["111"],["110"],["111"],["110"],["111"],"React Hook useEffect has missing dependencies: 'channelsRef' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["112"],"React Hook useEffect has a missing dependency: 'messageRef'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'props' and 'usersRef'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["114"],{"desc":"115","fix":"116"},"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [props]",{"range":"123","text":"124"},"Update the dependencies array to be: [channelsRef, props]",{"range":"125","text":"126"},"Update the dependencies array to be: [messageRef, props.channel]",{"range":"127","text":"128"},"Update the dependencies array to be: [props, props.user, usersRef]",{"range":"129","text":"130"},[993,995],"[props]",[1258,1260],"[channelsRef, props]",[1319,1334],"[messageRef, props.channel]",[1883,1895],"[props, props.user, usersRef]"]